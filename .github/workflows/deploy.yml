
on:
  push:
    branches:
      - develop
      - docker

name: Deploy to Amazon ECS

env:
  ECR_REPOSITORY_APP: ${{ secrets.AWS_ECR_APP_REPO_NAME }}
  ECR_REPOSITORY_WEB: ${{ secrets.AWS_ECR_WEB_REPO_NAME }}
  CONTAINER_NAME_APP: php
  CONTAINER_NAME_WEB: nginx
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-php:
    name: build-php
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        uses: actions/checkout@v2
        id: build-php-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f docker/Dockerfile.php . -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_APP }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_APP }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY_APP }}:$IMAGE_TAG"

  build-nginx:
    name: build-nginx
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-nginx-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f Dockerfile.nginx . -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_WEB }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_WEB }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY_WEB }}:$IMAGE_TAG"

  deploy:
    name: Deploy
    needs: [build-php, build-nginx]
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition SG-task --query taskDefinition > task-definition.json

      - name: Fill in the new PHP image ID in the Amazon ECS task definition
        id: task-def-modified-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME_APP }}
          image: ${{ needs.build-php.outputs.image }}

      - name: Fill in the new NIGINX image ID in the Amazon ECS task definition
        id: task-def-modified-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-modified-app.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_WEB }}
          image: ${{ needs.build-nginx.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-modified-web.outputs.task-definition }}
          service: SameGame-svc
          cluster: SameGame
          wait-for-service-stability: true
